  // This is your Prisma schema file,
  // learn more about it in the docs: https://pris.ly/d/prisma-schema

  // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
  // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

  generator client {
    provider = "prisma-client-js"
    output   = "../lib/generated/prisma"
  }

  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
  }

  model User {
    id           Int      @id @default(autoincrement()) 
    authUserId   String? 
    displayName  String
    avatarUrl    String? 
    createdAt    DateTime @default(now())

    groupParticipants GroupParticipant[]
    messages Message[]

    sentFriendRequests     Friend[] @relation("Sender")
    receivedFriendRequests Friend[] @relation("Receiver")
  }

  model Group {
    id               Int      @id @default(autoincrement()) 
    name             String
    description      String?
    deadlineProject  DateTime @db.Date()
    createdAt        DateTime @default(now())

    participants       GroupParticipant[] 
    messageRecipients  MessageRecipient[] 
  }

  model GroupParticipant {
    id          Int      @id @default(autoincrement()) 
    userId      Int
    groupId     Int
    role        Role @default(MEMBER)
    createdAt   DateTime @default(now())


    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

    @@unique([userId, groupId])
  }

  model Message {
    id         Int      @id @default(autoincrement()) 
    userId     Int
    text       String? 
    type       Type @default(TEXT)
    fileType   String?
    fileSize   Int?
    fileUrl    String?
    createdAt  DateTime @default(now())

    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    recipients MessageRecipient? 
    repliedBy  MessageRecipient[] @relation("ReplyTo")
  }

  model MessageRecipient {
    id             Int       @id @default(autoincrement()) 
    groupId        Int   
    messageId      Int       @unique
    replyToId      Int? 
    isEdit         Boolean 
    isPin          Boolean

    group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)    
    message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
    replyTo Message? @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: SetNull)
  }

  model Friend {
    id         Int       @id @default(autoincrement()) 
    senderId   Int
    receiverId Int
    status     FriendStatus @default(PENDING)
    createdAt  DateTime @default(now())

    sender   User @relation("Sender", fields: [senderId], references: [id])
    receiver User @relation("Receiver", fields: [receiverId], references: [id])
  
  }

  enum Role {
    MEMBER 
    ADMIN
  }

  enum Type { 
    TEXT
    IMAGE
    FILE 
    LINK
  }

  enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}